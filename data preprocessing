'''
Data Preprocessing

'''
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.impute import SimpleImputer
from datetime import datetime

# Read the dataset from a file
file_path = "/content/malicious website dataset.csv"  # Change this to your file path
df = pd.read_csv(file_path)

# Convert WHOIS_REGDATE and WHOIS_UPDATED_DATE to datetime format
df['WHOIS_REGDATE'] = pd.to_datetime(df['WHOIS_REGDATE'], errors='coerce')
df['WHOIS_UPDATED_DATE'] = pd.to_datetime(df['WHOIS_UPDATED_DATE'], errors='coerce')

# Impute missing values
imputer = SimpleImputer(strategy='mean')
df[['CONTENT_LENGTH', 'TCP_CONVERSATION_EXCHANGE', 'DIST_REMOTE_TCP_PORT',
    'REMOTE_IPS', 'APP_BYTES', 'SOURCE_APP_PACKETS', 'REMOTE_APP_PACKETS',
    'SOURCE_APP_BYTES', 'REMOTE_APP_BYTES', 'APP_PACKETS', 'DNS_QUERY_TIMES']] = imputer.fit_transform(df[[
    'CONTENT_LENGTH', 'TCP_CONVERSATION_EXCHANGE', 'DIST_REMOTE_TCP_PORT',
    'REMOTE_IPS', 'APP_BYTES', 'SOURCE_APP_PACKETS', 'REMOTE_APP_PACKETS',
    'SOURCE_APP_BYTES', 'REMOTE_APP_BYTES', 'APP_PACKETS', 'DNS_QUERY_TIMES']])

# Standardize numeric features
scaler = StandardScaler()
numeric_columns = ['URL_LENGTH', 'NUMBER_SPECIAL_CHARACTERS', 'CONTENT_LENGTH',
                   'TCP_CONVERSATION_EXCHANGE', 'DIST_REMOTE_TCP_PORT',
                   'REMOTE_IPS', 'APP_BYTES', 'SOURCE_APP_PACKETS',
                   'REMOTE_APP_PACKETS', 'SOURCE_APP_BYTES', 'REMOTE_APP_BYTES',
                   'APP_PACKETS', 'DNS_QUERY_TIMES']
df[numeric_columns] = scaler.fit_transform(df[numeric_columns])

# Encode categorical variables
encoder = LabelEncoder()
categorical_columns = ['CHARSET', 'SERVER', 'WHOIS_COUNTRY', 'WHOIS_STATEPRO']
for column in categorical_columns:
    df[column] = encoder.fit_transform(df[column])

# Handle outliers
# (You may add your specific outlier detection and handling techniques here)

# Display the preprocessed dataset
print(df)

# Define the path where you want to save the preprocessed data
preprocessed_file_path = "/content/preprocessed_dataset.csv"

# Save the preprocessed data to a new file
df.to_csv(preprocessed_file_path, index=False)

print("Preprocessed data saved to:", preprocessed_file_path)
